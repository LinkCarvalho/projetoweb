/* GRUPO:
    - Arthur Salviano
    - Filipe Carvalho
    - Diogo Silva

    Linguagem: DART
    Instruções de execução:
    1- javacc DartGramatica.jj   
    2- javac *.java   
    3- java DartGramatica teste.txt
*/

PARSER_BEGIN(DartGramatica)
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class DartGramatica {
    public static void main(String[] args) throws ParseException {
        if (args.length > 0) {
            try {
                // Abre o arquivo especificado como argumento (Ex: java DartGramatica teste.txt)
                FileInputStream fis = new FileInputStream(args[0]);
                DartGramatica parser = new DartGramatica(fis);
                parser.Inicio(); // Método inicial da gramática
                System.out.println("Sintaxe valida.");
            } catch (FileNotFoundException e) {
                System.out.println("Arquivo não encontrado: " + args[0]);
            }
        } else {
            System.out.println("Por favor, especifique um arquivo de entrada.");
        }
    }
}

PARSER_END(DartGramatica)

/* Tokens */
TOKEN : {
    <SOMA: "+"> | <SUBTRACAO: "-"> | <MULTIPLICACAO: "*"> | <DIVISAO: "/">
    | <IGUAL: "="> | <COMPARACAO: "=="> | <DIFERENTE: "!=">
    | <MAIOR: ">"> | <MENOR: "<"> | <MAIORIGUAL: ">="> | <MENORIGUAL: "<=">
    | <AND: "&&"> | <OR: "||"> | <NOT: "!">
}

TOKEN : {
    <IMPORT: "import ">
    | <IF: "if"> | <ELSE: "else">
    | <FOR: "for"> | <IN: "in"> | <WHILE: "while">
    | <TRUE: "true"> | <FALSE: "false">
    | <RETURN: "return">
    | <PRINT: "print"> | <ENTRADA: "stdin.readLineSync()">
}

TOKEN : {
     // Número inteiro ou real, positivo ou negativo
    <TIPO: ("int" | "String" | "bool" | "double" | "var" | "dynamic" | "void") ("?")?>  
    | <INTEIRO: (["0"-"9"])+ >   //(sem sinal)
    | <REAL: (["0"-"9"])+ ("." (["0"-"9"])+)? > 
    | <STRING: "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >  /* Aceita tudo menos as aspas dentro de uma string (simples e duplas) */
    | <COMENTARIO: "/*" 
                    (~["*"] | ("*" ~["/"]))*             //Aceita qualquer caractere que não seja "*" OU que seja um "*" e outro caractere sem ser o "/"
                "*/"> 
    | <IDENTIFICADOR: (["A"-"Z", "a"-"z", "_"]) (["A"-"Z", "a"-"z", "0"-"9", "_"])* >   
}



/* SKIP =  Define o que deve ser ignorado*/
SKIP: {
    <ESPACO: " " | "\n" | "\r" | "\r\n" >
}



/* Gramática */
void Inicio():
{}
{   
    (Import())*          /* Os imports precisam estar no topo do código */
    (Comando())* <EOF>
}

void Import():
{}
{
    <IMPORT> <STRING> ";"
}

void Comando():
{}
{    
    <TIPO> <IDENTIFICADOR> ( criarFuncao() | DeclaracaoVariavel()) 
    | <IDENTIFICADOR> (AtribuicaoOuEntrada() | chamarFuncao())
    | Condicional()
    | LoopFor()
    | LoopWhile()
    | Saida()
    | <COMENTARIO>
    
}

void Expressao():
{}
{   
    ExpressaoAritmetica() 
    ( ExpressaoBooleana() )?      // Expressões Booleanas
    ( ExpressaoLogica() )?      // Expressões Booleanas
    
    | <TRUE> | <FALSE>
    | <STRING>
}

void ExpressaoBooleana() :
{}{
    ( "==" | "!=" | "<" | ">" | "<=" | ">=" ) ExpressaoAritmetica()
}

void ExpressaoLogica() :
{}{
    ( <AND> | <OR>) ExpressaoAritmetica()
}

void ExpressaoAritmetica():
{}
{
    Termo() ( ( <SOMA> | <SUBTRACAO> ) Termo() )* 
}

void Termo():
{}
{
    Fator() ( ( <MULTIPLICACAO> | <DIVISAO> ) Fator() )*
}

void Fator(): /*Atribuição de sinais aos números, permite expressões entre parenteses e operações com identificadores*/
{}
{
    ( <SOMA> | <SUBTRACAO> )? Numero() 
    | <IDENTIFICADOR> 
    | "(" Expressao() ")"
}

void Numero():
{}
{
    <INTEIRO> | <REAL>
}

void DeclaracaoVariavel():
{}  /* ( <TIPO> <IDENTIFICADOR> ) */
{
    ( "=" ( Expressao() | <ENTRADA> ) )? ";" /* Declaração de variável ou de entrada*/
}

void AtribuicaoOuEntrada():
{}  /* <IDENTIFICADOR> */ 
{
    "=" ( Expressao() | <ENTRADA> ) ";"  /* Atribuição com identificador e valor */
}

void Condicional():
{}
{
    <IF> "(" Expressao() ")" "{" ( Comando() )* "}"
    ( <ELSE> ( Condicional() | "{" ( Comando() )* "}" ) )? // Caso de else if ou else (recursivo)
}

void LoopFor():
{}{
    <FOR> "(" <TIPO> <IDENTIFICADOR> <IN> <IDENTIFICADOR> ")" "{" ( Comando() )* "}"
}

void LoopWhile():
{}{
    <WHILE> "(" Expressao() ")" "{" ( Comando() )* "}"
}

void criarFuncao():
{}{
    /*<Tipo> <Identificador>*/

    "(" ( (<TIPO> <IDENTIFICADOR>) ("," <TIPO> <IDENTIFICADOR>)* )? ")" 
        "{" 
            ( Comando() )* 
            (<RETURN> Expressao() ";")?
        "}"
}

void chamarFuncao():
{}{  /*nome da funcao seguido por parenteses*/
    /*<IDENTIFICADOR>*/ "(" (Expressao() ("," Expressao())* )? ")" ";"
}


void Saida():
{}{
    <PRINT> "(" (<STRING> | <IDENTIFICADOR>) ")" ";"
}