/* Generated By:JavaCC: Do not edit this line. DartGramatica.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class DartGramatica implements DartGramaticaConstants {
    public static void main(String[] args) throws ParseException {
        if (args.length > 0) {
            try {
                // Abre o arquivo especificado como argumento (Ex: java DartGramatica teste.txt)
                FileInputStream fis = new FileInputStream(args[0]);
                DartGramatica parser = new DartGramatica(fis);
                parser.Inicio(); // Método inicial da gramática
                System.out.println("Sintaxe valida.");
            } catch (FileNotFoundException e) {
                System.out.println("Arquivo n\u00e3o encontrado: " + args[0]);
            }
        } else {
            System.out.println("Por favor, especifique um arquivo de entrada.");
        }
    }

/* Gramática */
  static final public void Inicio() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Import();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case TIPO:
      case COMENTARIO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Comando();
    }
    jj_consume_token(0);
  }

  static final public void Import() throws ParseException {
    jj_consume_token(IMPORT);
    jj_consume_token(STRING);
    jj_consume_token(33);
  }

  static final public void Comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO:
      jj_consume_token(TIPO);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 34:
        criarFuncao();
        break;
      case IGUAL:
      case 33:
        DeclaracaoVariavel();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL:
        AtribuicaoOuEntrada();
        break;
      case 34:
        chamarFuncao();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IF:
      Condicional();
      break;
    case FOR:
      LoopFor();
      break;
    case WHILE:
      LoopWhile();
      break;
    case PRINT:
      Saida();
      break;
    case COMENTARIO:
      jj_consume_token(COMENTARIO);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expressao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
    case SUBTRACAO:
    case INTEIRO:
    case REAL:
    case IDENTIFICADOR:
    case 34:
      ExpressaoAritmetica();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMPARACAO:
      case DIFERENTE:
      case MAIOR:
      case MENOR:
      case MAIORIGUAL:
      case MENORIGUAL:
        ExpressaoBooleana();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ExpressaoLogica();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpressaoBooleana() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPARACAO:
      jj_consume_token(COMPARACAO);
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      break;
    case MENOR:
      jj_consume_token(MENOR);
      break;
    case MAIOR:
      jj_consume_token(MAIOR);
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
      break;
    case MAIORIGUAL:
      jj_consume_token(MAIORIGUAL);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ExpressaoAritmetica();
  }

  static final public void ExpressaoLogica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ExpressaoAritmetica();
  }

  static final public void ExpressaoAritmetica() throws ParseException {
    Termo();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        jj_consume_token(SOMA);
        break;
      case SUBTRACAO:
        jj_consume_token(SUBTRACAO);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Termo();
    }
  }

  static final public void Termo() throws ParseException {
    Fator();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
      case DIVISAO:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLICACAO:
        jj_consume_token(MULTIPLICACAO);
        break;
      case DIVISAO:
        jj_consume_token(DIVISAO);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Fator();
    }
  }

  static final public void Fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
    case SUBTRACAO:
    case INTEIRO:
    case REAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SOMA:
          jj_consume_token(SOMA);
          break;
        case SUBTRACAO:
          jj_consume_token(SUBTRACAO);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      Numero();
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case 34:
      jj_consume_token(34);
      Expressao();
      jj_consume_token(35);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Numero() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEIRO:
      jj_consume_token(INTEIRO);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DeclaracaoVariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
      case TRUE:
      case FALSE:
      case INTEIRO:
      case REAL:
      case STRING:
      case IDENTIFICADOR:
      case 34:
        Expressao();
        break;
      case ENTRADA:
        jj_consume_token(ENTRADA);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(33);
  }

  static final public void AtribuicaoOuEntrada() throws ParseException {
    jj_consume_token(IGUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
    case SUBTRACAO:
    case TRUE:
    case FALSE:
    case INTEIRO:
    case REAL:
    case STRING:
    case IDENTIFICADOR:
    case 34:
      Expressao();
      break;
    case ENTRADA:
      jj_consume_token(ENTRADA);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(33);
  }

  static final public void Condicional() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(34);
    Expressao();
    jj_consume_token(35);
    jj_consume_token(36);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case TIPO:
      case COMENTARIO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_5;
      }
      Comando();
    }
    jj_consume_token(37);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        Condicional();
        break;
      case 36:
        jj_consume_token(36);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case FOR:
          case WHILE:
          case PRINT:
          case TIPO:
          case COMENTARIO:
          case IDENTIFICADOR:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_6;
          }
          Comando();
        }
        jj_consume_token(37);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static final public void LoopFor() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(34);
    jj_consume_token(TIPO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IN);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(35);
    jj_consume_token(36);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case TIPO:
      case COMENTARIO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      Comando();
    }
    jj_consume_token(37);
  }

  static final public void LoopWhile() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(34);
    Expressao();
    jj_consume_token(35);
    jj_consume_token(36);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case TIPO:
      case COMENTARIO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      Comando();
    }
    jj_consume_token(37);
  }

  static final public void criarFuncao() throws ParseException {
    jj_consume_token(34);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO:
      jj_consume_token(TIPO);
      jj_consume_token(IDENTIFICADOR);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 38:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_9;
        }
        jj_consume_token(38);
        jj_consume_token(TIPO);
        jj_consume_token(IDENTIFICADOR);
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(35);
    jj_consume_token(36);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case PRINT:
      case TIPO:
      case COMENTARIO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      Comando();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      jj_consume_token(RETURN);
      Expressao();
      jj_consume_token(33);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(37);
  }

  static final public void chamarFuncao() throws ParseException {
    jj_consume_token(34);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
    case SUBTRACAO:
    case TRUE:
    case FALSE:
    case INTEIRO:
    case REAL:
    case STRING:
    case IDENTIFICADOR:
    case 34:
      Expressao();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 38:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
        jj_consume_token(38);
        Expressao();
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    jj_consume_token(35);
    jj_consume_token(33);
  }

  static final public void Saida() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(34);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(35);
    jj_consume_token(33);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DartGramaticaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0xc5150000,0x20,0x20,0xc5150000,0xfc0,0x3000,0xb8600006,0xfc0,0x3000,0x6,0x6,0x18,0x18,0x6,0x6,0x98000006,0x18000000,0xba600006,0x20,0xba600006,0xc5150000,0xc5150000,0x10000,0x20000,0xc5150000,0xc5150000,0x0,0x4000000,0xc5150000,0x800000,0x0,0xb8600006,0xa0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x6,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x4,0x0,0x0,0x10,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x4,0x0,};
   }

  /** Constructor with InputStream. */
  public DartGramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DartGramatica(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DartGramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DartGramatica(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DartGramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DartGramatica(DartGramaticaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DartGramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
